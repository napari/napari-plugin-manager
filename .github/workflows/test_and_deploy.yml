# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: test and deploy

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  test:
    name: ${{ matrix.platform }}, py${{ matrix.python-version }}, napari ${{ matrix.napari }}, ${{ matrix.tool }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-13, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        napari: ["latest", "repo"]
        tool: ["pip", "conda"]
        include:
          # add 3.13 on ubuntu
          - platform: ubuntu-latest
            napari: repo
            tool: pip
            python-version: "3.13"
        exclude:
        # skip repo install on conda
        - platform: ubuntu-latest
          napari: repo
          tool: conda
        - platform: windows-latest
          napari: repo
        - platform: macos-13
          napari: repo
        - platform: macos-latest
          napari: repo

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python ${{ matrix.python-version }} - pip
        if: matrix.tool == 'pip'
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Python ${{ matrix.python-version }} - conda
        if: matrix.tool == 'conda'
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          miniforge-version: latest
          channels: conda-forge
          conda-remove-defaults: "true"
          python-version: ${{ matrix.python-version }}

      - uses: tlambert03/setup-qt-libs@19e4ef2d781d81f5f067182e228b54ec90d23b76 # v1.8

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1
          if (Test-Path -Path "C:\Windows\system32\opengl32.dll" -PathType Leaf) {Exit 0} else {Exit 1}

      - name: Install dependencies without tox-conda
        if: matrix.tool == 'pip'
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools tox tox-gh-actions tox-uv

      - name: Install dependencies including tox-conda
        if: matrix.tool == 'conda'
        shell: bash -el {0}
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools 'tox<4' tox-gh-actions tox-conda

      - name: Test with tox - pip
        if: matrix.tool == 'pip'
        uses: aganders3/headless-gui@f85dd6316993505dfc5f21839d520ae440c84816 # v2.2
        with:
          run: python -m tox
        env:
          PYVISTA_OFF_SCREEN: True  # required for opengl on windows
          NAPARI: ${{ matrix.napari }}
          TOOL: ${{ matrix.tool }}
          FORCE_COLOR: 1
      - name: Test with tox - conda
        if: matrix.tool == 'conda'
        uses: aganders3/headless-gui@f85dd6316993505dfc5f21839d520ae440c84816 # v2.2
        with:
          shell: bash -el {0}
          run: python -m tox
        env:
          PYVISTA_OFF_SCREEN: True  # required for opengl on windows
          NAPARI: ${{ matrix.napari }}
          TOOL: ${{ matrix.tool }}
          FORCE_COLOR: 1
          # Only supported pyside2 and pyside6 are not supported on py312, py313
          # no Qt backends supported by conda-forge on py313
          TOX_SKIP_ENV: ".*py31[23].*PySide2|.*py313.*conda"


      - name: Upload coverage data
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage reports ${{ matrix.platform }} py ${{ matrix.python-version }} ${{ matrix.tool }} ${{ matrix.napari }}
          include-hidden-files: true
          path: |
            ./.coverage.*


  upload_coverage:
    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read    # Required for code checkout
    name: Upload coverage
    needs: [test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"
          cache-dependency-path: pyproject.toml
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install codecov

      - name: Download coverage data
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: coverage reports*
          path: coverage
          merge-multiple: true


      - name: combine coverage data
        run: |
          python -Im coverage combine coverage
          python -Im coverage xml -o coverage.xml

          # Report and write to summary.
          python -Im coverage report --format=markdown --skip-empty --skip-covered >> "$GITHUB_STEP_SUMMARY"

      - name: Upload coverage data
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          fail_ci_if_error: true
          use_oidc: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}


  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools build
      - name: Build
        run: |
          git tag
          python -m build
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
